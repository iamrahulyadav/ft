apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.mallardduckapps.fashiontalks"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    android {

        signingConfigs {
            config {
                keyAlias 'fashiontalks'
                keyPassword 'qwerty'
                storeFile file('../fashiontalks.jks')
                storePassword 'qwerty'
            }
        }

        packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        buildTypes {
            release {
                minifyEnabled false
                signingConfig signingConfigs.config
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
            debug {
                applicationIdSuffix ".debug"
                debuggable true
                minifyEnabled false
            }
        }
        productFlavors {
        }
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = outputFile.name.replace('.apk', "-${versionName}.apk")
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }
}

repositories { mavenCentral() }


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:support-v13:21.0.3'
    compile 'com.google.android.gms:play-services:6.5.87'
    compile 'com.android.support:cardview-v7:21.0.+'
    compile 'com.android.support:recyclerview-v7:21.0.+'
    compile 'com.squareup.okhttp:okhttp:2.1.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'
    compile 'com.makeramen:roundedimageview:1.5.0'
    compile project(':gridListViewAdapters')
    compile 'com.jeremyfeinstein.slidingmenu:library:1.3@aar'
    compile 'com.github.castorflex.verticalviewpager:library:19.0.1'
    compile 'joda-time:joda-time:2.3'
    compile project(':simple-crop-image-lib')
    compile 'com.facebook.android:facebook-android-sdk:4.0.0'
}
// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
task checkLibVersions << {
    def checked = [:]
    allprojects {
        configurations.each { configuration ->
            configuration.allDependencies.each { dependency ->
                def version = dependency.version
                if(!version.contains('SNAPSHOT') && !checked[dependency]) {
                    def group = dependency.group
                    def path = group.replace('.', '/')
                    def name = dependency.name
                    def url = "http://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
                    try {
                        def metadata = new XmlSlurper().parseText(url.toURL().text)
                        def versions = metadata.versioning.versions.version.collect { it.text() }
                        versions.removeAll { it.toLowerCase().contains('alpha') }
                        versions.removeAll { it.toLowerCase().contains('beta') }
                        versions.removeAll { it.toLowerCase().contains('rc') }
                        def newest = versions.max()
                        if(version != newest) {
                            println "$group:$name $version -> $newest"
                        }
                    } catch(FileNotFoundException e) {
                        logger.debug "Unable to download $url: $e.message"
                    } catch(org.xml.sax.SAXParseException e) {
                        logger.debug "Unable to parse $url: $e.message"
                    }
                    checked[dependency] = true
                }
            }
        }
    }
}