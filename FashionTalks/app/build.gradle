apply plugin: 'com.android.application'
apply plugin: 'io.fabric'


buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    signingConfigs {
        config {
            keyAlias 'fashiontalks'
            keyPassword 'qwerty'
            storeFile file('../fashiontalks.jks')
            storePassword 'qwerty'
        }
    }
    defaultConfig {
        applicationId "com.mallardduckapps.fashiontalks"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 4
        versionName "1.0.3"
        signingConfig signingConfigs.config
    }
 //   android {

        packagingOptions {
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/NOTICE.txt'
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }

        buildTypes {
            release {
                minifyEnabled true
                signingConfig signingConfigs.config
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
            debug {
                applicationIdSuffix ".debug"
                debuggable true
                minifyEnabled false
            }
        }
    productFlavors {
    }
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = outputFile.name.replace('.apk', "-${versionName}.apk")
                    fileName= outputFile.name.replace("app","FashionTalks")
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
  //  }
    productFlavors {
    }
}

repositories {
    mavenCentral()
    maven { url "http://jzaccone.github.io/SlidingMenu-aar" }
    maven { url 'https://maven.fabric.io/public' }

}
//maven { url 'http://clinker.47deg.com/nexus/content/groups/public' }
//compile ('com.fortysevendeg.swipelistview:swipelistview:1.0-SNAPSHOT@aar') {
//    transitive = true
//}

dependencies {
    releaseCompile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile 'com.android.support:support-v4:22.0.0'
    compile 'com.android.support:support-v13:22.0.0'
    compile 'com.makeramen:roundedimageview:2.0.1'
    compile 'com.android.support:cardview-v7:22.0.0'
    compile 'com.squareup.okhttp:okhttp:2.1.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'
    compile project(':gridListViewAdapters')
    compile 'com.jeremyfeinstein.slidingmenu:library:1.3@aar'
    compile 'com.github.castorflex.verticalviewpager:library:19.0.1'
    compile 'joda-time:joda-time:2.3'
    compile project(':simple-crop-image-lib')
    compile 'com.facebook.android:facebook-android-sdk:4.0.0'
    compile 'com.nineoldandroids:library:2.4.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.3@aar') {
        transitive = true;
    }
    compile files('libs/commons-lang3-3.3.2.jar')
    compile 'com.google.android.gms:play-services:7.3.0'
}
// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
task checkLibVersions << {
    def checked = [:]
    allprojects {
        configurations.each { configuration ->
            configuration.allDependencies.each { dependency ->
                def version = dependency.version
                if(!version.contains('SNAPSHOT') && !checked[dependency]) {
                    def group = dependency.group
                    def path = group.replace('.', '/')
                    def name = dependency.name
                    def url = "http://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
                    try {
                        def metadata = new XmlSlurper().parseText(url.toURL().text)
                        def versions = metadata.versioning.versions.version.collect { it.text() }
                        versions.removeAll { it.toLowerCase().contains('alpha') }
                        versions.removeAll { it.toLowerCase().contains('beta') }
                        versions.removeAll { it.toLowerCase().contains('rc') }
                        def newest = versions.max()
                        if(version != newest) {
                            println "$group:$name $version -> $newest"
                        }
                    } catch(FileNotFoundException e) {
                        logger.debug "Unable to download $url: $e.message"
                    } catch(org.xml.sax.SAXParseException e) {
                        logger.debug "Unable to parse $url: $e.message"
                    }
                    checked[dependency] = true
                }
            }
        }
    }
}